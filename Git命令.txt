安装完成后，还需要最后一步设置，在命令行输入：
git config --global user.name "Your Name"
git config --global user.email "email@example.com"

创建版本库
mkdir git
cd git
pwd

git init   初始化仓库

git add <file>   
git commit -m <message>

git status
git diff
cat <file>

git log
git log --pretty=oneline

git reset --hard HEAD^     回退到上一个版本
git reset --hard HEAD~n    回退到上N个版本
git reflog                 历史记录，方便查看commit id
git reset --hard ID        回退到指定版本，ID为commit id
git diff HEAD -- <file>    查看工作区和版本库里面最新版本的区别
git checkout -- <file>     撤销修改和恢复删除

rm <file>                  删除工作区文件
git rm <file> & git commit <file>    彻底删除版本库文件

1、创建SSH keys
ssh-keygen -t rsa -C "zhy5205318@sina.com"
用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥

2、登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：

添加远程库
Github创建： create new repos  如：Git

git remote add origin https://github.com/heaxen/Git.git    本地仓库添加到远程仓库
git push -u origin master / git push origin master         同步文件到远程仓库
git clone https://github.com/heaxen/Git                    克隆远程仓库到本地

创建分支
git checkout -b dev   参数-b表示创建并切换
等价于下面两条命令
git branch dev
git checkout dev
git branch            列出所有分支，当前分支前面会标一个*号

分支修改之后执行
git add <file>
git commit -m <message>
git checkout master   切换回主线

git merge dev         合并分支代码到当前分支
git branch -d dev     删除分支

git log --graph                                     可以看到分支合并图
git log --graph --pretty=oneline --abbrev-commit    看分支合并情况



Bug分支
有利于解决在dev分支进行开发的同时，既不想提交分支代码，但是又要解决当前分支上的Bug的问题

需求：在master分支修复Bug，当前分支为dev
git stash                    把当前工作现场‘储藏’起来，等恢复现场之后继续工作
git checkout master          切换到master分支
git checkout -b issue-101    在master分支拉取修复Bug的临时分支
git add <file>               
git commit -m <message>
git checkout master
git merge --no-ff -m "<message>" issue-101     合并分支时，加上--no-ff参数，表示禁用Fast forward，此时就可以用普通模式合并，
											   合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
git branch -d issue-101                删除临时分支
git checkout dev                       最后切换到dev分支
git stash list                         查看之前‘储藏’的工作现场
git stash apply  &  git stash drop     恢复工作现场方法1，但是恢复后，stash内容并不删除，你需要用git stash drop来删除
git stash pop                          恢复工作现场方法2，恢复的同时把stash内容也删了

可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
git stash apply stash@{0}



Feature分支
每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
样例：
git checkout -b feature-vulcan
git add vulcan.py
git commit - m "add feature vulcan"
git checkout dev

准备合并（git merge --no-ff -m "merge feature vulcan" feature-vulcan），但是这个功能需要取消，使用删除命令
git branch -d feature-vulcan
feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的-D参数
git branch -D feature-vulcan



协作开发
git remote  & git remote -v     查看远程库信息
git push origin master          推送本地master分支代码到远程库
git push origin dev             推送本地dev分支代码到远程库

git clone https://github.com/heaxen/Git      抓取分支，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆
git checkout -b dev origin/dev               协作伙伴需要在dev分支上开发，就必须创建远程origin的dev分支到本地

修改后进行推送
git add <file>
git commit -m <message>
git push origin dev

如果其他开发者已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送就会出现冲突
git pull          把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送

如果git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接
git branch --set-upstream-to=origin/dev dev   ( git branch --set-upstream-to <branch-name> origin/<branch-name> )
然后继续git pull，最后再git push

搭建Git服务器

第一步，安装git：
$ sudo apt-get install git


第二步，创建一个git用户，用来运行git服务：
$ sudo adduser git


第三步，创建证书登录：
收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。


第四步，初始化Git仓库：
先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
$ sudo chown -R git:git sample.git


第五步，禁用shell登录：
出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
git:x:1001:1001:,,,:/home/git:/bin/bash
改为：
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。


第六步，克隆远程仓库：
$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
剩下的推送就简单了。



用git pull取回远程仓库某个分支的更新，再与本地的指定分支自动merge
git pull的作用是，从远程库中获取某个分支的更新，再与本地指定的分支进行自动merge。完整格式是：
git pull <远程库名> <远程分支名>:<本地分支名>  

比如，取回远程库中的develop分支，与本地的develop分支进行merge，要写成：
git pull origin develop:develop  

如果是要与本地当前分支merge，则冒号后面的<本地分支名>可以不写。
git pull origin develop  

通常，git会将本地库分支与远程分支之间建立一种追踪关系。比如，在git clone的时候，所有本地分支默认与远程库的同名分支建立追踪关系。也就是说，本地的master分支自动追踪origin/master分支。因此，如果当前处于本地develop分支上，并且本地develop分支与远程的develop分支有追踪关系，那么远程的分支名可以省略：
git pull origin  

其实，git pull 命令等同于先做了git fetch ，再做了git merge。即：
[plain] view plain copy
git fetch origin develop  
git checkout develop  
git merge origin/develop  

好多人不建议使用git pull，喜欢自己merge，以便万一自动merge出错的时候可以解决冲突。